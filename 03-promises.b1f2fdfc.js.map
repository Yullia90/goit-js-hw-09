{"mappings":"AA8CA,SAASA,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAxCEQ,SAASC,cAAc,SAC/BC,iBAAiB,UAExB,SAAsBC,GACpBA,EAAMC,iBAYN,IAAMZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWC,OAAOC,YAAY,IAAIC,SAASP,EAAMQ,SACpEN,EAAQO,OAAOP,GACfC,EAAOM,OAAON,GACd,IAAK,IAAIO,EAAI,EAAGA,GAAKN,EAAQM,IAC3BvB,EAAcuB,EAAGR,GACdS,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBuB,QAAQC,IAAI,uBAAqBzB,QAAiBC,MAAU,IAE7DyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBuB,QAAQC,IAAI,sBAAoBzB,QAAiBC,MAAU,IAE/Da,GAASC,C","sources":["src/js/03-promises.js"],"sourcesContent":["// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в\n// мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість\n// промісів, яку необхідно створити.\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію\n// createPromise(position, delay) стільки разів, скільки ввели в поле amount.\n// Під час кожного виклику передай їй номер промісу(position), що створюється, і затримку,\n// враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n//   який виконується або відхиляється через delay часу.Значенням промісу повинен бути\n//   об'єкт, в якому будуть властивості position і delay зі значеннями однойменних\n// параметрів.Використовуй початковий код функції для вибору того, що потрібно зробити\n// з промісом - виконати або відхилити.\n\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  // let delay = event.currentTarget.delay.value;\n  // let step = event.currentTarget.step.value;\n  // let amount = event.currentTarget.amount.value;\n  ////////////////////////////////\n  // let { delay, step, amount } = event.target;\n  // let delayValue = delay.value;\n  // let stepValue = step.value;\n  // let amountValue = amount.value;\n  //////////////////////////////////////////////////////////метод добавлення масиву//////////////////////////\n  // let bla = Object.values(Object.fromEntries(new FormData(event.target)));\n  // console.log(bla);\n  let { delay, step, amount } = Object.fromEntries(new FormData(event.target));\n  delay = Number(delay);\n  step = Number(step);\n  for (let i = 0; i <= amount; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","step","amount","Object","fromEntries","FormData","target","Number","i","then","console","log","catch"],"version":3,"file":"03-promises.b1f2fdfc.js.map"}