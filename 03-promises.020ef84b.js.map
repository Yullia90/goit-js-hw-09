{"mappings":"MACwBA,KAAKC,UAwB1BC,MAAK,EAACC,SAAEA,EAAQC,MAAEA,MACjBC,QAAQC,IAAI,uBAAqBH,QAAiBC,MAAU,IAE7DG,OAAM,EAACJ,SAAEA,EAAQC,MAAEA,MAClBC,QAAQC,IAAI,sBAAoBH,QAAiBC,MAAU","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в\n// мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість\n// промісів, яку необхідно створити.\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію\n// createPromise(position, delay) стільки разів, скільки ввели в поле amount.\n// Під час кожного виклику передай їй номер промісу(position), що створюється, і затримку,\n// враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n//   який виконується або відхиляється через delay часу.Значенням промісу повинен бути\n//   об'єкт, в якому будуть властивості position і delay зі значеннями однойменних\n// параметрів.Використовуй початковий код функції для вибору того, що потрібно зробити\n// з промісом - виконати або відхилити.\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\n// Бібліотека повідомлень\n// УВАГА\n// Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою\n// додатковою практикою.\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй\n// бібліотеку notiflix.\n"],"names":["Math","random","then","position","delay","console","log","catch"],"version":3,"file":"03-promises.020ef84b.js.map"}